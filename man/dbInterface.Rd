% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_db.R
\name{dbInterface}
\alias{dbInterface}
\title{dbInterface}
\value{
The return value, if any, from executing the function.

A cleaned string.

onelineq

Parses a SQL file into a valid query string.
}
\description{
An R6 class used to interface with a database. Provides
wrapper functions for common database operations, such as querying, creating
tables, appending and writing to tables,
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{dbInterface$new()}}
\item \href{#method-get}{\code{dbInterface$get()}}
\item \href{#method-set}{\code{dbInterface$set()}}
\item \href{#method-connect}{\code{dbInterface$connect()}}
\item \href{#method-disconnect}{\code{dbInterface$disconnect()}}
\item \href{#method-generic}{\code{dbInterface$generic()}}
\item \href{#method-query}{\code{dbInterface$query()}}
\item \href{#method-execute}{\code{dbInterface$execute()}}
\item \href{#method-create}{\code{dbInterface$create()}}
\item \href{#method-append}{\code{dbInterface$append()}}
\item \href{#method-write}{\code{dbInterface$write()}}
\item \href{#method-lineclean}{\code{dbInterface$lineclean()}}
\item \href{#method-onelineq}{\code{dbInterface$onelineq()}}
\item \href{#method-clone}{\code{dbInterface$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$new(drv, host, port, user, pass, db)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{drv}}{A database connection driver.}

\item{\code{host}}{A hostname to connect to.}

\item{\code{port}}{A port to connect to.}

\item{\code{user}}{A database username.}

\item{\code{pass}}{A password to use to authenticate the user.}

\item{\code{db}}{A database name to connect to.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\if{latex}{\out{\hypertarget{method-get}{}}}
\subsection{Method \code{get()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$get(var)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{var}}{A variable name to get.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The private variable value.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set"></a>}}
\if{latex}{\out{\hypertarget{method-set}{}}}
\subsection{Method \code{set()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$set(var, val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{var}}{A variable name to set.}

\item{\code{val}}{A variable value to set.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-connect"></a>}}
\if{latex}{\out{\hypertarget{method-connect}{}}}
\subsection{Method \code{connect()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$connect()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-disconnect"></a>}}
\if{latex}{\out{\hypertarget{method-disconnect}{}}}
\subsection{Method \code{disconnect()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$disconnect()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-generic"></a>}}
\if{latex}{\out{\hypertarget{method-generic}{}}}
\subsection{Method \code{generic()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$generic(fn, params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fn}}{A function to call.}

\item{\code{params}}{A list of named parameters to pass to `fn`.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A result of the called function.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-query"></a>}}
\if{latex}{\out{\hypertarget{method-query}{}}}
\subsection{Method \code{query()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$query(sql)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sql}}{A SQL query.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The results of the query.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-execute"></a>}}
\if{latex}{\out{\hypertarget{method-execute}{}}}
\subsection{Method \code{execute()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$execute(sql)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sql}}{}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The results of the execute.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create"></a>}}
\if{latex}{\out{\hypertarget{method-create}{}}}
\subsection{Method \code{create()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$create(schema = "public", table, fields)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{schema}}{A schema name to create the table in. Defaults to "public".}

\item{\code{table}}{A table name to create.}

\item{\code{fields}}{A named vector: names are column names, values are types.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-append"></a>}}
\if{latex}{\out{\hypertarget{method-append}{}}}
\subsection{Method \code{append()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$append(schema = "public", table, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{schema}}{A schema name to reference. Default is "public".}

\item{\code{table}}{A table name to append to.}

\item{\code{data}}{A data.frame to append to the table.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-write"></a>}}
\if{latex}{\out{\hypertarget{method-write}{}}}
\subsection{Method \code{write()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$write(schema = "public", table, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{schema}}{A schema name to reference. Default is "public".}

\item{\code{table}}{A table name to write to.}

\item{\code{data}}{A data frame to write to table.

lineclean

Cleans a string of whitespace, particularly of:
 * tabs
 * leading and trailing whitespace
 * collapses multiple spaces
 * destroys single line SQL comments}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lineclean"></a>}}
\if{latex}{\out{\hypertarget{method-lineclean}{}}}
\subsection{Method \code{lineclean()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$lineclean(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{A string to remove various whitespace from.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-onelineq"></a>}}
\if{latex}{\out{\hypertarget{method-onelineq}{}}}
\subsection{Method \code{onelineq()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$onelineq(file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{A SQL file on disk to parse into a single line string.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A cleaned SQL query from file.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dbInterface$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
